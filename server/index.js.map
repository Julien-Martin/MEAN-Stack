{"version":3,"sources":["404.js","authentication.js","catch.js","controllers.js","crash.js","mapis.js","middleware.js","requirements.js","tests.js","access.crud.js","agenda.crud.js","client-doctor.crud.js","client-individual.js","contents.crud.js","files.crud.js","forms.crud.js","front.router.js","page.crud.js","people.crud.js","settings.crud.js","statistics.crud.js","test.crud.js","user.crud.js","users.crud.js","agenda.model.js","client-doctor.model.js","client-individual.model.js","dummy.model.js","statistics.model.js","user.model.js","core/bootstrapper.js","core/express.js","core/getDependency.js","core/loadMAPI.js","core/log_helper.js","dapi/chainloader4dapi.js","dapi/app/content.js","dapi/app/files.js","dapi/app/groups.js","dapi/app/mail.js","dapi/app/useful.js","dapi/app/users.js","dapi/models/content.model.js","dapi/models/file.model.js","dapi/models/groups.model.js","dapi/models/users.model.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrnpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var stack_404 = function (request, response, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    response.statusCode = 404;\n    response.send(\"404\");\n};","var authSerializer = function (user, done) {\n    done(null, user.id);\n};\n\nvar authDeserializer = function (id, done) {\n    var User = getDependency(dapi_model_users);\n    if(id == \"admin\"){\n        done(null, {admin : \"true\", id: \"admin\"})\n    } else {\n        User.findById(id, function (error, user) {\n            done(error, user);\n        });\n    }\n};\n\nfunction authentication() {\n    var User = getDependency(dapi_model_users);\n\n    var passport = getDependency('passport');\n    var PassportLocalStrategy = getDependency('passport-local');\n\n    var authStrategy = new PassportLocalStrategy({\n        usernameField: 'username',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, function(req, username, password, done) {\n        User.authenticate(username, password, function(error, user){\n            // You can write any kind of message you'd like.\n            // The message will be displayed on the next page the user visits.\n            // We're currently not displaying any success message for logging in.\n            done(error, user, error ? { message: error.message } : null);\n        });\n    });\n\n    passport.use(authStrategy);\n    passport.serializeUser(authSerializer);\n    passport.deserializeUser(authDeserializer);\n    var session = getDependency('express-session');\n\n    var app = stack.globals.expressApp;\n    app.use(getDependency('connect-flash')());\n    app.use(passport.initialize());\n    app.use(passport.session());\n}","var stack_catch = function (err, req, res, next) {\n    res.status(err.status || 500);\n    console.log(err);\n    res.send(err);\n};","var stack_controllers = {\n    /*\"/users\": router_users,\n    \"/files\": router_files,\n    \"/settings\": router_settings,\n    \"/contents\": router_contents,\n    \"/people\": router_people,\n    \"/page\": router_page,\n    \"/forms\": router_forms,\n    \"/doctors\": router_client_doctors,\n    \"/individuals\": router_client_individuals,\n    \"/users\": router_users,\n    \"/agenda\": router_agenda,\n    \"/statistics\": router_statistics,\n    \"/access\": router_access,*/\n    \"/\": router_front\n};\n\n\n","function stack_crash(error) {\n    var debug = getDependency('debug')('test:server');\n    var http = getDependency('http');\n    var https = getDependency('https');\n    var fs = getDependency('fs');\n    var express = getDependency('express');\n\n\n    console.log(error);\n\n    var crashApp = express();\n    crashApp.get('*', function (request, response, next) {\n        response.send(\"This server is in maintenance\")\n    });\n    if (stack.globals.environment.https){\n        var privateKey = fs.readFileSync(stack.globals.environment.privateKeyPath, \"utf8\");\n        var certificate = fs.readFileSync(stack.globals.environment.certificatePath, \"utf8\");\n        var ca = [];\n        for (var caPath of stack.globals.environment.caPaths) {\n            ca.push(fs.readFileSync(caPath, \"utf8\"));\n        }\n        var credentials = {key: privateKey, cert: certificate, secure: true, ca: ca};\n        crashApp.set('port', stack.globals.environment.httpsPort);\n        var crashServer = https.createServer(credentials, crashApp);\n        crashServer.listen(stack.globals.environment.httpsPort);\n        console.log((new Date()).toLocaleString() + \" CATCH SERVER LAUNCHED ON PORT \" + stack.globals.environment.httpsPort);\n    } else {\n        console.log((new Date()).toLocaleString() + \" CATCH SERVER LAUNCHED ON PORT \" + stack.globals.environment.httpPort);\n        crashApp.listen(stack.globals.environment.httpPort);\n    }\n\n}","function stack_mapis() {\n\n}","var stack_middleware = [\n    function poweredBy(request, response, next) {\n        response.setHeader(\"x-powered-by\", \"KVM Stack\");\n        next();\n    }\n];","function requirements() {\n    var promises = [];\n    var mongoose = getDependency('mongoose');\n    mongoose.Promise = Promise;\n\n    var config = {};\n    config.mongo = getDependency('../config/mongo.json');\n\n    promises.push(\n        new Promise((resolve, reject) => {\n            mongoose.connect(config.mongo.url, {user: config.mongo.user, pass: config.mongo.password}, function (err) {\n                if (err) {\n                    reject(\"Failed to connect MongoDB: \" + err);\n                }\n                else {\n                    console.log(\"Mongoose connection validated\");\n                    mongoose.connection.close();\n                    resolve(\"Mongoose connection validated\");\n                }\n            })\n        })\n    );\n\n    return promises;\n}","function stack_tests() {\n}","function router_access() {\r\n    var express = getDependency('express'),\r\n        router = express.Router();\r\n\r\n\r\n    router.get(\"/logout\",\r\n        stack.dapis.access.pehgs.logout(),\r\n        function* (request, response, next){\r\n            response.redirect(\"/loggedOut\");\r\n        }\r\n    );\r\n\r\n    router.get(\"/\", stack.dapis.access.ehgs.me());\r\n    router.post(\"/\", stack.dapis.access.pehgs.login(\"/\", \"/?e=asd\"));\r\n\r\n    return router;\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction router_agenda() {\r\n    let router = new StackRouter();\r\n\r\n    let bodyExtractor = request => request.body;\r\n    let identifierExtractor = request => request.params.identifier;\r\n\r\n    var Agenda = getDependency(model_agenda);\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet((request, response, next) => {\r\n            Agenda.find()\r\n                .then(data => {\r\n                    response.send(data);\r\n                })\r\n                .catch(errors => {\r\n                    console.log(errors);\r\n                });\r\n        })\r\n        .onPost((request, response, next) => {\r\n            if (data) {\r\n                var myAgenda = new Agenda();\r\n                myAgenda.date = request.body.date;\r\n                myAgenda.title = request.body.title;\r\n                myAgenda.content = request.body.content;\r\n                return myClient.save();\r\n            } else {\r\n                throw \"No data\";\r\n            }\r\n        })\r\n        .then(data => {\r\n            response.send(data);\r\n        })\r\n        .catch(errors => {\r\n            console.log(errors);\r\n        });\r\n\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet((request, response, next) => {\r\n\r\n        })\r\n        .onPut((request, response, next) => {\r\n\r\n        })\r\n        .onDelete((request, response, next) => {\r\n\r\n        })\r\n    ;\r\n\r\n    return router;\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction router_client_doctors() {\r\n    let router = new StackRouter();\r\n\r\n    let bodyExtractor = request => request.body;\r\n    let identifierExtractor = request => request.params.identifier;\r\n\r\n    var Client = getDependency(model_client_doctor);\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet((request, response, next) => {\r\n            Client.find()\r\n                .then(data => {\r\n                    response.send(data);\r\n                })\r\n                .catch(errors => {\r\n                    console.log(errors);\r\n                });\r\n        })\r\n        .onPost((request, response, next) => {\r\n            if (data) {\r\n                var myClient = new Client();\r\n                myClient.name           = request.body.name;\r\n                myClient.surname        = request.body.surname;\r\n                myClient.society        = request.body.society;\r\n                myClient.address        = request.body.address;\r\n                myClient.postalCode     = request.body.postalCode;\r\n                myClient.city           = request.body.city;\r\n                myClient.phoneNumber1   = request.body.phoneNumber1;\r\n                myClient.phoneNumber2   = request.body.phoneNumber2;\r\n                myClient.fax            = request.body.fax;\r\n                myClient.mobile         = request.body.mobile;\r\n                myClient.infos          = request.body.infos;\r\n                myClient.state          = request.body.state;\r\n                myClient.user           = request.body.user;\r\n                return myClient.save();\r\n            } else {\r\n                throw \"No data\";\r\n            }\r\n        })\r\n        .then(data => {\r\n            response.send(data);\r\n        })\r\n        .catch(errors => {\r\n            console.log(errors);\r\n        });\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet((request, response, next) => {\r\n\r\n        })\r\n        .onPut((request, response, next) => {\r\n\r\n        })\r\n        .onDelete((request, response, next) => {\r\n\r\n        })\r\n    ;\r\n\r\n    return router;\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction router_client_individuals() {\r\n    let router = new StackRouter();\r\n\r\n    let bodyExtractor = request => request.body;\r\n    let identifierExtractor = request => request.params.identifier;\r\n\r\n    var Client = getDependency(model_client_individual);\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet((request, response, next) => {\r\n            Client.find()\r\n                .then(data => {\r\n                    response.send(data);\r\n                })\r\n                .catch(errors => {\r\n                    console.log(errors);\r\n                });\r\n        })\r\n        .onPost((request, response, next) => {\r\n            if (data) {\r\n                var myClient = new Client();\r\n                myClient.name           = request.body.name;\r\n                myClient.surname        = request.body.surname;\r\n                myClient.address        = request.body.address;\r\n                myClient.postalCode     = request.body.postalCode;\r\n                myClient.city           = request.body.city;\r\n                myClient.phoneNumber1   = request.body.phoneNumber1;\r\n                myClient.phoneNumber2   = request.body.phoneNumber2;\r\n                myClient.fax            = request.body.fax;\r\n                myClient.mobile         = request.body.mobile;\r\n                myClient.infos          = request.body.infos;\r\n                myClient.state          = request.body.state;\r\n                myClient.user           = request.body.user;\r\n                return myClient.save();\r\n            } else {\r\n                throw \"No data\";\r\n            }\r\n        })\r\n        .then(data => {\r\n            response.send(data);\r\n        })\r\n        .catch(errors => {\r\n            console.log(errors);\r\n        });\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet((request, response, next) => {\r\n\r\n        })\r\n        .onPut((request, response, next) => {\r\n\r\n        })\r\n        .onDelete((request, response, next) => {\r\n\r\n        })\r\n    ;\r\n\r\n    return router;\r\n}","function router_contents() {\r\n    let router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n\r\n    let contentsEhgs = stack.dapis.contents.ehgs;\r\n\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet(contentsEhgs.getPaged(0, 15))\r\n        .onPost(contentsEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/trashs\")\r\n        .onGet(contentsEhgs.getTrashed())\r\n    ;\r\n\r\n    router.onRoute(\"/trash/:identifier\")\r\n        .onPut(contentsEhgs.trash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/untrash/:identifier\")\r\n        .onPut(contentsEhgs.untrash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/bind/:identifier\")\r\n        .onPut(contentsEhgs.bind(identifierExtractor, r => r.body.childId))\r\n        .onPost(contentsEhgs.createAndBind(bodyExtractor, identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/makeIndependent/:identifier\")\r\n        .onPut(contentsEhgs.makeIndependent(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/setChildren/:identifier\")\r\n        .onPut(\r\n            stack.dapis.useful.pehgs.parseJson(),\r\n            contentsEhgs.setChildren(identifierExtractor, r => r.body.childrenId))\r\n    ;\r\n\r\n    router.onRoute(\"/channel/:identifier\")\r\n        .onGet(contentsEhgs.getInChannel(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/independentInChannel/:identifier\")\r\n        .onGet(contentsEhgs.getIndependentInChannel(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/channel/rename\")\r\n        .onPut(contentsEhgs.renameChannel(r => r.body.channelArg, r => r.body.newChannelArg))\r\n    ;\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onDelete(contentsEhgs.delete(identifierExtractor))\r\n        .onGet(contentsEhgs.get(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/publish/:identifier\")\r\n        .onPut(contentsEhgs.publish(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/unpublish/:identifier\")\r\n        .onPut(contentsEhgs.unpublish(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/property/:identifier\")\r\n        .onPut(contentsEhgs.updateProperty(identifierExtractor, r => r.body.propertyArg, r => r.body.stringArg))\r\n    ;\r\n\r\n    router.onRoute(\"/properties/:identifier\")\r\n        .onPut(contentsEhgs.updateProperties(identifierExtractor, bodyExtractor))\r\n    ;\r\n\r\n\r\n    return router;\r\n}","function router_files() {\r\n    var router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n    \r\n    router.onAll(\"/*\", stack.dapis.access.pehgs.restrictTo(5, \"/\"));\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet(function (request, response, next) {\r\n        })\r\n        .onPost(\r\n            stack.dapis.files.pehgs.upload(),\r\n            function* (request, response, next){\r\n                response.send(request.peh);\r\n            }\r\n        )\r\n    ;\r\n    router.onRoute(\"/s\")\r\n        .onPost(\r\n            stack.dapis.files.pehgs.secureUpload(r => r.user._id),\r\n            function* (request, response, next){\r\n                response.send(request.peh);\r\n            }\r\n        )\r\n    ;\r\n\r\n    router.onRoute(\"/s/:identifier\")\r\n        .onGet(stack.dapis.files.ehgs.serve(identifierExtractor, r => r.user._id))\r\n    ;\r\n\r\n    router.onRoute(\"/pages/:page/:pageLength\")\r\n        .onGet(stack.dapis.files.ehgs.getPaged(r => r.params.page, r => r.params.pageLength))\r\n    ;\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet(stack.dapis.files.ehgs.get(identifierExtractor))\r\n        .onPut(stack.dapis.files.ehgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(stack.dapis.files.ehgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    return router;\r\n}","function router_forms() {\r\n    var router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n\r\n    let evaluationEhgs = stack.project.mapis.forms.evaluations.ehgs;\r\n    let surveyEhgs = stack.project.mapis.forms.survey.ehgs;\r\n    let multipleResultEhgs = stack.project.mapis.forms.multipleResults.ehgs;\r\n\r\n    //Evaluation\r\n    router.onRoute(\"/evaluations\")\r\n        .onPost(evaluationEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/getPaged/\")\r\n        .onGet(evaluationEhgs.getPaged(0, 15))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/:identifier\")\r\n        .onGet(evaluationEhgs.get(identifierExtractor))\r\n        .onPut(evaluationEhgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(evaluationEhgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/trash/:identifier\")\r\n        .onPut(evaluationEhgs.trash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/untrash/:identifier\")\r\n        .onPut(evaluationEhgs.untrash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/updateProperties/:identifier\")\r\n        .onPut(evaluationEhgs.updateProperties(identifierExtractor, bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/updateProperty/:identifier\")\r\n        .onPut(evaluationEhgs.updateProperty(identifierExtractor, r => r.body.propertyArg, r => r.body.stringArg))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/makeCopy/:identifier\")\r\n        .onPost(evaluationEhgs.makeCopy(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/calculateScore/:identifier\")\r\n        .onGet(evaluationEhgs.calculateScore(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/calculateAverage/:identifier\")\r\n        .onGet(evaluationEhgs.calculateAverage(r => r.body.title))\r\n    ;\r\n\r\n    router.onRoute(\"/evaluations/calculateVariance/\")\r\n        .onGet(evaluationEhgs.calculateVariance(r => r.body.title))\r\n    ;\r\n\r\n    //Survey\r\n    router.onRoute(\"/surveys\")\r\n        .onPost(surveyEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/getPaged/\")\r\n        .onGet(surveyEhgs.getPaged(0, 15))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/:identifier\")\r\n        .onGet(surveyEhgs.get(identifierExtractor))\r\n        .onPut(surveyEhgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(surveyEhgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/trash/:identifier\")\r\n        .onPut(surveyEhgs.trash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/untrash/:identifier\")\r\n        .onPut(surveyEhgs.untrash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/updateProperties/:identifier\")\r\n        .onPut(surveyEhgs.updateProperties(identifierExtractor, bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/updateProperty/:identifier\")\r\n        .onPut(surveyEhgs.updateProperty(identifierExtractor, r => r.body.propertyArg, r => r.body.stringArg))\r\n    ;\r\n\r\n    router.onRoute(\"/surveys/makeCopy/:identifier\")\r\n        .onPost(surveyEhgs.makeCopy(identifierExtractor))\r\n    ;\r\n\r\n    //MultipleResult\r\n    router.onRoute(\"/multipleResults\")\r\n        .onPost(multipleResultEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/getPaged/\")\r\n        .onGet(multipleResultEhgs.getPaged(0, 15))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/:identifier\")\r\n        .onGet(multipleResultEhgs.get(identifierExtractor))\r\n        .onPut(multipleResultEhgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(multipleResultEhgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/trash/:identifier\")\r\n        .onPut(multipleResultEhgs.trash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/untrash/:identifier\")\r\n        .onPut(multipleResultEhgs.untrash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/updateProperties/:identifier\")\r\n        .onPut(multipleResultEhgs.updateProperties(identifierExtractor, bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/updateProperty/:identifier\")\r\n        .onPut(multipleResultEhgs.updateProperty(identifierExtractor, r => r.body.propertyArg, r => r.body.stringArg))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/makeCopy/:identifier\")\r\n        .onPost(multipleResultEhgs.makeCopy(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/addResult/:identifier\")\r\n        .onPut(multipleResultEhgs.addResult(identifierExtractor, r => r.body.resultText, r => r.body.goodResponsesArray, r => r.body.badResponsesArray))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/removeResult/:identifier\")\r\n        .onPut(multipleResultEhgs.removeResult(identifierExtractor, r => r.body.index))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/increaseResult/:identifier\")\r\n        .onPut(multipleResultEhgs.increaseResult(identifierExtractor, r => r.body.index))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/decreaseResult/:identifier\")\r\n        .onPut(multipleResultEhgs.decreaseResult(identifierExtractor, r => r.body.index))\r\n    ;\r\n\r\n    router.onRoute(\"/multipleResults/getFinalResult/:identifier\")\r\n        .onGet(multipleResultEhgs.getFinalResult(identifierExtractor))\r\n    ;\r\n\r\n\r\n\r\n    return router;\r\n}\r\n","function router_front(){\r\n    var express = getDependency('express'),\r\n        Promise = getDependency('es6-promise').Promise,\r\n        util = getDependency('util'),\r\n        formidable = getDependency('formidable');\r\n    router = express.Router();\r\n\r\n    router.get(\"/\", function(req, res){\r\n        res.render(\"pages/login\")\r\n    });\r\n\r\n    return router;\r\n}","function router_page() {\r\n    var router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n\r\n    let pageEhgs = stack.project.mapis.page.page.ehgs;\r\n    let sectionEhgs = stack.project.mapis.page.section.ehgs;\r\n\r\n    //Page\r\n\r\n    router.onRoute(\"/page/\")\r\n        .onPost(pageEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/getPaged/\")\r\n        .onGet(pageEhgs.getPaged(0, 15))\r\n    ;\r\n\r\n    router.onRoute(\"/page/getAllSeasonal/\")\r\n        .onGet(pageEhgs.getAllSeasonal())\r\n    ;\r\n\r\n    router.onRoute(\"/page/getAllEventMod/\")\r\n        .onGet(pageEhgs.getAllEventMod())\r\n    ;\r\n\r\n    router.onRoute(\"/page/:identifier\")\r\n        .onGet(pageEhgs.get(identifierExtractor))\r\n        .onPut(pageEhgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(pageEhgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/getSectionsInPage/:identifier\")\r\n        .onGet(pageEhgs.getSectionsInPage(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/trash/:identifier\")\r\n        .onPut(pageEhgs.trash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/untrash/:identifier\")\r\n        .onPut(pageEhgs.untrash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/updateProperties/:identifier\")\r\n        .onPut(pageEhgs.updateProperties(identifierExtractor, bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/updateProperty/:identifier\")\r\n        .onPut(pageEhgs.updateProperty(identifierExtractor, r => r.body.propertyArg, r => r.body.stringArg))\r\n    ;\r\n\r\n    router.onRoute(\"/page/addChildren/:identifier\")\r\n        .onPut(pageEhgs.addChildren(identifierExtractor, r => r.body.childrenIdArg))\r\n    ;\r\n\r\n    router.onRoute(\"/page/makeIndependent/:identifier\")\r\n        .onPut(pageEhgs.makeIndependent(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/bind/:identifier\")\r\n        .onPut(pageEhgs.bind(identifierExtractor, r => r.body.childId))\r\n        .onPost(pageEhgs.createAndBind(bodyExtractor, identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/clearChildren/:identifier\")\r\n        .onPut(pageEhgs.clearChildren(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/page/removeChild/:identifier\")\r\n        .onPut(pageEhgs.removeChild(identifierExtractor, r => r.body.childIdArg))\r\n    ;\r\n\r\n    //Section\r\n\r\n    router.onRoute(\"/section/getPaged\")\r\n        .onPut(sectionEhgs.getPaged(r => r.body.pageArg, r => r.body.pageLengthArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/\")\r\n        .onPost(sectionEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/:identifier\")\r\n        .onGet(sectionEhgs.get(identifierExtractor))\r\n        .onPut(sectionEhgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(sectionEhgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/trash/:identifier\")\r\n        .onPut(sectionEhgs.trash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/untrash/:identifier\")\r\n        .onPut(sectionEhgs.untrash(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/updateProperties/:identifier\")\r\n        .onPut(sectionEhgs.updateProperties(identifierExtractor, bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/updateProperty/:identifier\")\r\n        .onPut(sectionEhgs.updateProperty(identifierExtractor, r => r.body.propertyArg, r => r.body.stringArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/addChildren/:identifier\")\r\n        .onPut(sectionEhgs.addChildren(identifierExtractor, r => r.body.childrenIdArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/bind/:identifier\")\r\n        .onPut(sectionEhgs.bind(identifierExtractor, r => r.body.childId))\r\n        .onPost(sectionEhgs.createAndBind(bodyExtractor, identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/clearChildren/:identifier\")\r\n        .onPut(sectionEhgs.clearChildren(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/section/removeChild/:identifier\")\r\n        .onPut(sectionEhgs.removeChild(identifierExtractor, r => r.body.childIdArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/setPosition/:identifier\")\r\n        .onPut(sectionEhgs.setPosition(identifierExtractor, r => r.body.positionArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/setAlign/:identifier\")\r\n        .onPut(sectionEhgs.setAlign(identifierExtractor, r => r.body.alignArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/addSectionToPage/:identifier\")\r\n        .onPut(sectionEhgs.addSectionToPage(identifierExtractor, r => r.body.pageIdArg))\r\n    ;\r\n\r\n    router.onRoute(\"/section/getParents/:identifier\")\r\n        .onGet(sectionEhgs.getParents(identifierExtractor))\r\n    ;\r\n\r\n    return router;\r\n}","function router_people() {\r\n    var router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n\r\n    let peoplesEhgs = stack.project.mapis.people.ehgs;\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet(peoplesEhgs.getAll())\r\n        .onPost(peoplesEhgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet(peoplesEhgs.get(identifierExtractor))\r\n        .onPut(peoplesEhgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(peoplesEhgs.delete(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/makeIndependent/:identifier\")\r\n        .onPut(peoplesEhgs.makeIndependent(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/setChildren/:identifier\")\r\n        .onPut(peoplesEhgs.setChildren(identifierExtractor, r => r.body.childrenId))\r\n    ;\r\n\r\n    router.onRoute(\"/makeDivorced/:identifier\")\r\n        .onPut(peoplesEhgs.makeDivorced(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/setSpouse/:identifier\")\r\n        .onPut(peoplesEhgs.setSpouse(identifierExtractor, r => r.body.spouseId))\r\n    ;\r\n\r\n    router.onRoute(\"/desactivateOrReactivate/:identifier\")\r\n        .onPut(peoplesEhgs.desactivateOrReactivate(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/addFriend/:identifier\")\r\n        .onPut(peoplesEhgs.addFriend(identifierExtractor, r => r.body.friendId))\r\n    ;\r\n\r\n    router.onRoute(\"/removeFriend/:identifier\")\r\n        .onPut(peoplesEhgs.removeFriend(identifierExtractor, r => r.body.friendId))\r\n    ;\r\n\r\n    router.onRoute(\"/addSibling/:identifier\")\r\n        .onPut(peoplesEhgs.addSibling(identifierExtractor, r => r.body.siblingId))\r\n    ;\r\n\r\n    router.onRoute(\"/removeSibling/:identifier\")\r\n        .onPut(peoplesEhgs.removeSibling(identifierExtractor, r => r.body.siblingId))\r\n    ;\r\n\r\n    router.onRoute(\"/checkMail/:identifier\")\r\n        .onGet(peoplesEhgs.checkMail(identifierExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/createWithUser\")\r\n        .onPost(peoplesEhgs.createWithUser(r => r.body.peopleLightInstance, r => r.body.userLightInstance))\r\n    ;\r\n\r\n    router.onRoute(\"/getPeopleOfUser/:identifier\")\r\n        .onGet(peoplesEhgs.getPeopleOfUser(identifierExtractor))\r\n    ;\r\n\r\n    return router;\r\n}","function router_settings() {\r\n    var router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n\r\n    let settings = stack.dapis.settings.ehgs;\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet(settings.getPaged(0, 100))\r\n        .onPost(settings.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/reset/:identifier\")\r\n        .onPut(settings.reset(identifierExtractor));\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet(settings.get(identifierExtractor))\r\n        .onPut(settings.set(identifierExtractor, r => r.body.value))\r\n        .onDelete(settings.delete(identifierExtractor))\r\n    ;\r\n\r\n    return router;\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction router_statistics() {\r\n    let router = new StackRouter();\r\n\r\n    let bodyExtractor = request => request.body;\r\n    let identifierExtractor = request => request.params.identifier;\r\n\r\n    var Statistics = getDependency(model_statistics);\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet((request, response, next) => {\r\n            Statistics.find()\r\n                .then(data => {\r\n                    response.send(data);\r\n                })\r\n                .catch(errors => {\r\n                    console.log(errors);\r\n                });\r\n        })\r\n        .onPost((request, response, next) => {\r\n            if (data) {\r\n                var myStatistics = new Statistics();\r\n                myStatistics.name      = request.body.name;\r\n                return myStatistics.save();\r\n            } else {\r\n                throw \"No data\";\r\n            }\r\n        })\r\n        .then(data => {\r\n            response.send(data);\r\n        })\r\n        .catch(errors => {\r\n            console.log(errors);\r\n        });\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet((request, response, next) => {\r\n\r\n        })\r\n        .onPut((request, response, next) => {\r\n\r\n        })\r\n        .onDelete((request, response, next) => {\r\n\r\n        })\r\n    ;\r\n\r\n    return router;\r\n}","function router_test() {\r\n    var router = new StackRouter();\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet(function* (request, response, next) {\r\n            var dummyArray = yield $project.models.dummy.find();\r\n            console.log(dummyArray);\r\n            response.send(dummyArray);\r\n        })\r\n    ;\r\n\r\n    return router;\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction router_users() {\r\n    var express = getDependency('express'),\r\n        router = express.Router();\r\n\r\n\r\n    let bodyExtractor = request => request.body;\r\n    let identifierExtractor = request => request.params.identifier;\r\n\r\n    var User = getDependency(model_user);\r\n\r\n    router.route(\"/\")\r\n        .get((request, response, next) => {\r\n            User.find()\r\n                .then(data => {\r\n                    response.send(data);\r\n                })\r\n                .catch(errors => {\r\n                    console.log(errors);\r\n                });\r\n        })\r\n        .post((request, response, next) => {\r\n            if (data) {\r\n                var myUser = new User();\r\n                myUser.name      = request.body.name;\r\n                myUser.surname   = request.body.surname;\r\n                myUser.logId     = request.body.logId;\r\n                myUser.password  = request.body.password;\r\n                myUser.rank      = request.body.rank;\r\n                myUser.stats     = request.body.stats;\r\n                return myUser.save();\r\n            } else {\r\n                throw \"No data\";\r\n            }\r\n        })\r\n        .then(data => {\r\n            response.send(data);\r\n        })\r\n        .catch(errors => {\r\n            console.log(errors);\r\n        });\r\n\r\n    router.route(\"/:identifier\")\r\n        .get((request, response, next) => {\r\n\r\n        })\r\n        .put((request, response, next) => {\r\n\r\n        })\r\n        .delete((request, response, next) => {\r\n\r\n        })\r\n    ;\r\n\r\n    return router;\r\n}","function router_users() {\r\n    let router = new StackRouter();\r\n\r\n    let bodyExtractor = r => r.body;\r\n    let identifierExtractor = r => r.params.identifier;\r\n\r\n    router.onRoute(\"/\")\r\n        .onGet(function (request, response, next) {\r\n\r\n        })\r\n        .onPost(stack.dapis.users.ehgs.create(bodyExtractor))\r\n    ;\r\n\r\n    router.onRoute(\"/pages/:page/:pageLength\")\r\n        .onGet(stack.dapis.users.ehgs.getPaged(r => r.params.page, r => r.params.pageLength))\r\n    ;\r\n\r\n    router.onRoute(\"/:identifier\")\r\n        .onGet(stack.dapis.users.ehgs.get(identifierExtractor))\r\n        .onPut(stack.dapis.users.ehgs.update(identifierExtractor, bodyExtractor))\r\n        .onDelete(stack.dapis.users.ehgs.remove(identifierExtractor))\r\n    ;\r\n\r\n    return router;\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction model_agenda() {\r\n    var mongoose = getDependency('mongoose');\r\n    var Schema = mongoose.Schema;\r\n\r\n    var agenda = new Schema({\r\n        //incomplete\r\n        date: {type: Date, required: true},\r\n    });\r\n\r\n    return mongoose.model('agenda', agenda);\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction model_client_doctor() {\r\n    var mongoose = getDependency('mongoose');\r\n    var Schema = mongoose.Schema;\r\n\r\n    var doctor = new Schema({\r\n        name:           {type: String,   required: true},\r\n        surname:        {type: String,   required: true},\r\n        society:        {type: String,   required: true},\r\n        address:        {type: String,   required: true},\r\n        postalCode:     {type: String,   required: true},\r\n        city:           {type: String,   required: true},\r\n        phoneNumber1:   {type: Number,   required: true},\r\n        phoneNumber2:   {type: Number,   required: true},\r\n        fax:            {type: Number,   required: true},\r\n        mobile:         {type: Number,   required: true},\r\n        infos:          {type: String,   required: true},\r\n        state:          {type: String,   required: true},\r\n        user:           {type: objectId, required: true},\r\n    });\r\n\r\n    return mongoose.model('doctor', doctor);\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction model_client_individual() {\r\n    var mongoose = getDependency('mongoose');\r\n    var Schema = mongoose.Schema;\r\n\r\n    var individual = new Schema({\r\n        name:           {type: String,   required: true},\r\n        surname:        {type: String,   required: true},\r\n        address:        {type: String,   required: true},\r\n        postalCode:     {type: String,   required: true},\r\n        city:           {type: String,   required: true},\r\n        phoneNumber1:   {type: Number,   required: true},\r\n        phoneNumber2:   {type: Number,   required: true},\r\n        fax:            {type: Number,   required: true},\r\n        mobile:         {type: Number,   required: true},\r\n        infos:          {type: String,   required: true},\r\n        state:          {type: String,   required: true},\r\n        user:           {type: objectId, required: true},\r\n    });\r\n\r\n    return mongoose.model('individual', individual);\r\n}","function model_dummy() {\r\n    var mongoose = getDependency('mongoose');\r\n    var Schema = mongoose.Schema;\r\n\r\n    var myShema = new Schema({\r\n        title: {type: String, required: true}\r\n    });\r\n\r\n    return mongoose.model('dummy', myShema);\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction model_statistics() {\r\n    var mongoose = getDependency('mongoose');\r\n    var Schema = mongoose.Schema;\r\n\r\n    var statistics = new Schema({\r\n        //incomplete\r\n        name:       {type: String,   required: true},\r\n    });\r\n\r\n    return mongoose.model('statistics', statistics);\r\n}","/**\r\n * Created by eqo on 19/12/16.\r\n */\r\n\r\nfunction model_user() {\r\n    var mongoose = getDependency('mongoose');\r\n    var Schema = mongoose.Schema;\r\n\r\n    var user = new Schema({\r\n        name:       {type: String,   required: true},\r\n        surname:    {type: String,   required: true},\r\n        logId:      {type: String,   required: true},\r\n        password:   {type: String,   required: true},\r\n        rank:       {type: Number,   required: true},\r\n        stats:      {type: objectId, required: true},\r\n    });\r\n\r\n    return mongoose.model('user', user);\r\n}","exports.launch = function (__env__) {\n    __env__ = __env__.data;\n\n    Promise.all(requirements())\n        .then(_ => {\n            try {\n                launchServer(__env__);\n            } catch (e) {\n                console.log((new Date()).toLocaleString() + \" SERVER CRASHED\");\n\n                if (stack.globals.server) {\n                    console.log((new Date()).toLocaleString() + \" SHUTTING DOWN SERVER\");\n                    stack.globals.server.close();\n                }\n\n                stack_crash(e);\n            }\n        })\n        .catch(err => {\n            console.log(err);\n            console.log(\"Error exiting app some requirements were not met.\")\n        })\n    ;\n};\n\nvar stack = {};\nstack.globals = {};\nstack.globals.server = {};\nstack.globals.expressApp = {};\nstack.globals.redirectServer = {};\nstack.globals.environment = {};\nstack.globals.mongoose = {};\nstack.globals.version = \"1.0.0\";\nstack.mapis = {};\nstack.dapis = {};\nstack.models = {};\nstack.core = {};\n\nfunction launchServer(__env__) {\n    stack.globals.environment = __env__;\n    //Module dependencies.\n    var debug = getDependency('debug')('test:server');\n    var http = getDependency('http');\n    var https = getDependency('https');\n    var fs = getDependency('fs');\n    var express = getDependency('express');\n\n    stack.globals.expressApp = express();\n    var port;\n    //Create HTTP server.\n    if (__env__.https) {\n        port = __env__.httpsPort;\n        stack.globals.expressApp.set('port', port);\n\n        var privateKey = fs.readFileSync(__env__.privateKeyPath, \"utf8\");\n        var certificate = fs.readFileSync(__env__.certificatePath, \"utf8\");\n        var ca = [];\n        for (var caPath of __env__.caPaths) {\n            ca.push(fs.readFileSync(caPath, \"utf8\"));\n        }\n        var credentials = {key: privateKey, cert: certificate, secure: true, ca: ca};\n\n        var redirectServer = express();\n        redirectServer.get('*',function(req,res){\n            res.redirect('https://'+__env__.domain+\":\"+port+req.url)\n        });\n\n        stack.globals.redirectServer = redirectServer.listen(__env__.httpPort);\n\n        stack.globals.server = https.createServer(credentials, stack.globals.expressApp);\n    } else {\n        port = __env__.httpPort;\n        stack.globals.expressApp.set('port', port);\n        stack.globals.server = http.createServer(stack.globals.expressApp);\n    }\n\n    initExpress();\n\n    //Listen on provided port, on all network interfaces.\n    stack.globals.server.listen(port);\n    stack.globals.server.on('error', function (error) {\n        if (error.syscall !== 'listen') {\n            throw error;\n        }\n\n        // handle specific listen errors with friendly messages\n        switch (error.code) {\n            case 'EACCES':\n                console.error('Port requires elevated privileges');\n                process.exit(1);\n                break;\n            case 'EADDRINUSE':\n                console.error('Port is already in use');\n                process.exit(1);\n                break;\n            default:\n                throw error;\n        }\n    });\n    stack.globals.server.on('listening', function () {\n        var addr = stack.globals.server.address();\n        var bind = typeof addr === 'string'\n            ? 'pipe ' + addr\n            : 'port ' + addr.port;\n        stack.helpers.aLog('\\033[32mListening on ' + bind + \"\\033[0m\");\n    });\n}","var initExpress = function () {\n    console.log();\n    console.log(\"|-| Initializing express...\");\n    console.log(\" | \");\n    console.time(\"|-| Express init\");\n    stack.helpers.log(\"Importing dependencies\", 1).iLog();\n\n    var express = getDependency('express'),\n        session = getDependency('express-session'),\n        path = getDependency('path'),\n        favicon = getDependency('serve-favicon'),\n        logger = getDependency('morgan'),\n        cookieParser = getDependency('cookie-parser'),\n        bodyParser = getDependency('body-parser'),\n        mongoose = getDependency('mongoose');\n\n    stack.helpers.cLog(\"Dependencies imported\");\n\n    //Import of configuration files\n    var config = {};\n    config.main = getDependency('../config/main.json');\n    config.mongo = getDependency('../config/mongo.json');\n\n    stack.helpers.log(\"Initializing mongoDB\").iLog();\n    stack.helpers.log(\"Connection to mongoDB initialized\");\n    stack.helpers.log(config.mongo.url);\n    // Connect to mongoDB\n    mongoose.connect(config.mongo.url, {user: config.mongo.user, pass: config.mongo.password}, function (err) {\n        if (err)\n            stack.helpers.aLog(\"Failed to connect MongoDB: \" + err);\n        else\n            stack.helpers.aLog(\"Connected to MongoDB\");\n    });\n\n    stack.helpers.log(\"Injecting ES6 Promises into Mongoose\");\n    mongoose.Promise = Promise;\n    stack.helpers.cLog(\"MongoDB initialized\");\n\n\n    stack.helpers.log(\"Setting up Express app\").iLog();\n\n    stack.helpers.log(\"Extracting app from global\");\n    //create app\n    var app = stack.globals.expressApp;\n\n    stack.helpers.log(\"Setting up view Engine\");\n    // view engine setup\n    app.set('views', path.join(__dirname, './views'));\n    app.set('view engine', 'pug');\n\n\n    stack.helpers.log(\"Setting up default Middleware\");\n    app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\n    if (app.get('env') === 'development') {\n        logger.format('stack', '\\033[96m | ASYNC|->\\033[0m :remote-addr - :remote-user [:date[clf]] \\033[95m\":method :url HTTP/:http-version\" :status :res[content-length]\\033[0m');\n        app.use(logger(\"stack\"));\n    }\n\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(cookieParser());\n\n\n    stack.helpers.log(\"Setting up Public Folders\");\n    app.use(express.static(path.join(__dirname, 'public')));\n    app.use('/node_modules', express.static(path.join(__dirname, '../node_modules')));\n\n\n    stack.helpers.log(\"Setting up Express session\");\n    app.use(session({\n        secret: 'a4f8071f-c873-4447-8ee2',\n        resave: false,\n        saveUninitialized: true,\n        cookie: {secure: stack.globals.environment.https}\n    }));\n\n    //stack and stack dependencies\n    stack.helpers.log(\"Setting up Stacks Core Hooks\").iLog();\n    stack.helpers.log(\"Loading custom middleware\", 3).iLog();\n\n    stack.globals.middleware = stack_middleware;\n    for (let middleware of stack_middleware) {\n        app.use(middleware);\n        stack.helpers.log(\"Added [\" + middleware.name + \"] to app.\");\n    }\n    stack.helpers.cLog(\"Middleware loaded\");\n    stack.globals.mongoose = mongoose;\n    stack.helpers.log(\"Loading authentication\", 3);\n    authentication();\n    stack.helpers.log(\"Loading Stack DAPIs\", 3);\n    stack_dapis();\n    stack.helpers.log(\"Loading Stack MAPIs\", 3);\n    stack.helpers.iLog();\n    stack_mapis();\n    stack.helpers.lastLogLevel = 4;\n    stack.helpers.cLog(\"Stack MAPIs Loaded\");\n\n    stack.helpers.log(\"Loading Stack Controllers\", 3).iLog();\n    stack.globals.controllers = stack_controllers;\n    for (var routerBase in stack_controllers) {\n        var ccontroller = stack_controllers[routerBase];\n        stack.helpers.log(\"Loading onto \" + routerBase + \" router [\" + ccontroller.name + \"]\");\n        app.use(routerBase, ccontroller());\n    }\n    stack.helpers.cLog(\"Stack Controllers loaded\");\n\n    if (app.get('env') === 'development') {\n        stack.helpers.log(\"Executing Stack Tests\").iLog();\n        stack_tests();\n        stack.helpers.log(\"Stack Tests executed\", -3);\n    }\n\n    stack.helpers.lastLogLevel = 3;\n\n    stack.helpers.log(\"Loading Stack 404 and error handlers\");\n    // catch 404 and forward to error handler\n    app.use(stack_404);\n    app.use(stack_catch);\n\n    stack.helpers.cLog(\"Stacks Core Hooks called\");\n    stack.helpers.cLog(\"Express app configured\");\n\n    console.timeEnd(\"|-| Express init\");\n    console.log();\n    return app;\n};","\nvar dependency = {};\n\nfunction getDependency(dependencyArg) {\n    dependency = dependency || {};\n    if(typeof dependencyArg == \"string\"){\n        if (!dependency[dependencyArg]) {\n            dependency[dependencyArg] = require(dependencyArg);\n        }\n        return dependency[dependencyArg];\n    }\n    else if(typeof dependencyArg == \"function\"){\n        if (!dependency[dependencyArg.name]) {\n            dependency[dependencyArg.name] = dependencyArg();\n        }\n        return dependency[dependencyArg.name];\n    }\n    else {\n        throw \"Dependency injection not supported for type \" + typeof dependencyArg ;\n    }\n}\n\nvar stack = stack || {};\nstack.core = stack.core || {};\nstack.core.getDependency = getDependency;\n\nfunction updateDependency(dependencyArg){\n    if (!dependency) {\n        dependency = {};\n    }\n    if(typeof dependencyArg == \"string\"){\n        dependency[dependencyArg] = require(dependencyArg);\n        return dependency[dependencyArg];\n    }\n    else if(typeof dependencyArg == \"function\"){\n        dependency[dependencyArg.name] = dependencyArg();\n        return dependency[dependencyArg.name];\n    }\n    else {\n        throw \"Dependency injection not supported for type \" + typeof dependencyArg ;\n    }\n}","function loadMAPI(mapiArg) {\n    dependency = dependency || {};\n    if (typeof mapiArg == \"string\") {\n        if (!dependency[mapiArg]) {\n            dependency[mapiArg] = require(mapiArg);\n            var myDependency = dependency[mapiArg];\n            if (myDependency.__NAME && myDependency.__VERSION && myDependency.__AUTHOR && myDependency.__STACKVERSIONS && myDependency.load) {\n                if (myDependency.__STACKVERSIONS.indexOf(stack.globals.version) > -1){\n                    stack.mapis[myDependency.__NAME] = myDependency;\n                    myDependency.load(stack);\n                } else {\n                    throw \"Dependency is not compatible with this stack version\";\n                }\n            } else {\n                console.log(myDependency.__NAME + \" \" + myDependency.__VERSION + \" \" + myDependency.__AUTHOR + \" \" + myDependency.load);\n                delete dependency[mapiArg];\n                throw \"Dependency is not compatible\";\n            }\n        }\n        return dependency[mapiArg];\n    }\n    else {\n        throw \"Dependency injection not supported for type \" + typeof mapiArg;\n    }\n}\n\nstack.core.loadMAPI = loadMAPI;\n","var stack = stack || {};\nstack.helpers = stack.helpers || {};\nstack.helpers.lastLogLevel = 0;\n\n\n\nstack.helpers.iLog = function () {\n    stack.helpers.lastLogLevel += 1;\n    return stack.helpers;\n};\n\nstack.helpers.dLog = function () {\n    stack.helpers.lastLogLevel -= 1;\n    return stack.helpers;\n};\n\nstack.helpers.cLog = function (toBeLogged) {\n    stack.helpers.lastLogLevel -= 1;\n    stack.helpers.log(toBeLogged, -stack.helpers.lastLogLevel);\n    stack.helpers.lastLogLevel = -stack.helpers.lastLogLevel;\n    stack.helpers.log();\n    return stack.helpers;\n};\n\nstack.helpers.aLog = function (toBeLogged) {\n    console.log(\"\\033[96m | ASYNC|-> \\033[0m\" + toBeLogged);\n    return stack.helpers;\n};\n\nstack.helpers.log = function (toBeLogged, level) {\n    if (level) {\n        stack.helpers.lastLogLevel = level;\n    }\n    var prefix = \"\";\n    if (stack.helpers.lastLogLevel > 0) {\n        for (let i = 0; i < stack.helpers.lastLogLevel; i++) {\n            prefix += \"\\033[3\" + (i < 6 ? 2+i : 2).toString() + \"m | \\033[0m\"\n        }\n    } else {\n        for (let i = 0; i < -stack.helpers.lastLogLevel - 1; i++) {\n            prefix += \"\\033[3\" + (i < 6 ? 2+i : 2).toString() + \"m | \"\n        }\n        prefix += \"\\033[3\" + (2-stack.helpers.lastLogLevel < 6 ? 2-stack.helpers.lastLogLevel : 2).toString() + \"m |<- \";\n        prefix += \"\\033[3\" + (1-stack.helpers.lastLogLevel < 6 ? 1-stack.helpers.lastLogLevel : 2).toString() + \"m\";\n    }\n    console.log(prefix + (toBeLogged || \"\") +\"\\033[0m\");\n    return stack.helpers;\n};","function stack_dapis() {\n    stack.models.content = getDependency(dapi_model_content);\n    stack.models.file = getDependency(dapi_model_file);\n    stack.models.groups = getDependency(dapi_model_groups);\n    stack.models.users = getDependency(dapi_model_users);\n}","var dapi = dapi || {};\ndapi.content = dapi.content || {};\ndapi.content.interface = {};\nstack = stack || {};\nstack.dapis = stack.dapis || {};\n\ndapi.content.newInstance = function (content, title, identifier, channel, tags, properties, rights, author, isPublic, hasParent) {\n    var Content = getDependency(dapi_model_content);\n    var myNewContent = new Content();\n    myNewContent.title = title;\n    myNewContent.content = content;\n    myNewContent.channel = channel;\n    myNewContent.tags = tags;\n    myNewContent.rights = rights;\n    myNewContent.author = author;\n    myNewContent.isPublic = isPublic;\n    myNewContent.children = [];\n    myNewContent.hasParent = hasParent;\n    myNewContent.identifier = identifier;\n    myNewContent.properties = properties;\n    return myNewContent;\n};\n\ndapi.content.deleteWithChildren = function (objectId) {\n    return dapi.content.getChildren(objectId)\n        .then(data => {\n            if (data) {\n                let promiseArray = [];\n                for (let child of data) {\n                    promiseArray.push(dapi.content.deleteWithChildren(child._id));\n                }\n                promiseArray.push(dapi.content.delete(objectId));\n                return Promise.all(promiseArray);\n            } else {\n                return dapi.content.delete(objectId);\n            }\n        })\n        ;\n};\n\ndapi.content.new = function (content, title, identifier, channel, tags, properties, rights, author, isPublic, hasParent) {\n    return dapi.content.getAllIdentifiers(channel)\n        .then(data => {\n            if (identifier) {\n                for (var object of data) {\n                    if (object.identifier == identifier) {\n                        return new Promise((resolve, reject) => {\n                            reject(\"Identifier allready exists\")\n                        });\n                    }\n                }\n            }\n            var myInstance = dapi.content.newInstance(content, title, identifier, channel, tags, properties, rights, author, isPublic, hasParent);\n            return myInstance.save();\n        })\n    ;\n};\n\ndapi.content.delete = function (id) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findByIdAndRemove(id);\n};\n\ndapi.content.get = function (id) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findById(id).populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]).exec();\n};\ndapi.content.getChildren = function (id) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findById(id, \"children\").populate('children').then(data => {\n        if (data) {\n            return data.children;\n        } else {\n            return new Promise((resolve, reject) => {\n                reject(\"Object does not exist\")\n            });\n        }\n    });\n};\ndapi.content.getPublic = function (channel) {\n    var Content = getDependency(dapi_model_content);\n    return Content.find(channel ? {isPublic: true, channel: channel} : {isPublic: true}).populate([{\n        path: 'children',\n        select: ''\n    }, {path: 'author', select: 'username'}]);\n};\ndapi.content.getAllowed = function (rights, channel) {\n    var Content = getDependency(dapi_model_content);\n    return Content.find(channel\n            ? {\n            $and: [\n                {channel: channel},\n                {\n                    $or: [\n                        {$where: \"this.rights <= \" + rights.toString()},\n                        {isPublic: true}\n                    ]\n                }\n            ]\n        }\n            : {\n            $or: [\n                {$where: \"this.rights <= \" + rights.toString()},\n                {isPublic: true}\n            ]\n        }\n    ).populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n};\ndapi.content.getAll = function (channel) {\n    var Content = getDependency(dapi_model_content);\n    return Content.find(channel ? {channel: channel} : {}).populate([{path: 'children', select: ''}, {\n        path: 'author',\n        select: 'username'\n    }]);\n};\ndapi.content.getByIdentifier = function (channel, identifier) {\n    if (channel) {\n        var Content = getDependency(dapi_model_content);\n        return Content.findOne({\n            $and: [\n                {channel: channel},\n                {identifier: identifier}\n            ]\n        }).populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n    } else {\n        throw \"Channel arg is not defined\";\n    }\n};\ndapi.content.getAllIdentifiers = function (channel) {\n    var Content = getDependency(dapi_model_content);\n    return Content.find(channel ? {channel: channel} : {}, \"identifier\").lean().exec();\n};\ndapi.content.getAllTopLevel = function (channel) {\n    var Content = getDependency(dapi_model_content);\n    return Content.find(channel ? {\n        $and: [\n            {channel: channel},\n            {hasParent: {$ne: true}}\n        ]\n    } : {hasParent: {$ne: true}}).populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n};\ndapi.content.getAllPublicTopLevel = function (channel) {\n    var Content = getDependency(dapi_model_content);\n    return Content.find(channel ? {\n        $and: [\n            {isPublic: true},\n            {channel: channel},\n            {hasParent: {$ne: true}}\n        ]\n    } : {hasParent: {$ne: true}}).populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n};\n\ndapi.content.update = function (id, content, identifier, channel, title, tags, properties, rights, author, isPublic, hasParent) {\n    var Content = getDependency(dapi_model_content);\n    return dapi.content.getAllIdentifiers(channel)\n        .then(data => {\n            if (identifier) {\n                for (var object of data) {\n                    if (object.identifier == identifier && object._id != id) {\n                        return new Promise((resolve, reject) => {\n                            reject(\"Identifier allready exists\")\n                        });\n                    }\n                }\n            }\n            return Content.findByIdAndUpdate(id, {\n                content: content,\n                title: title,\n                channel: channel,\n                tags: tags,\n                rights: rights,\n                author: author,\n                identifier: identifier,\n                isPublic: isPublic,\n                properties: properties,\n                hasParent: hasParent\n            }, {new: true}).populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n        })\n        ;\n};\n\ndapi.content.updateProperties = function (id, properties) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findByIdAndUpdate(id, {properties: properties}, {new: true})\n        .populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n};\ndapi.content.makePublic = function (id) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findByIdAndUpdate(id, {isPublic: true}, {new: true})\n        .populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n};\ndapi.content.makePrivate = function (id) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findByIdAndUpdate(id, {isPublic: false}, {new: true})\n        .populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n};\n\ndapi.content.addChild = function (parentId, childId) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findByIdAndUpdate(parentId, {$addToSet: {children: childId}}, {new: true})\n        .then(data => {\n            return Content.findByIdAndUpdate(childId, {hasParent: true}, {new: true})\n                .populate([{path: 'children', select: ''}, {path: 'author', select: 'username'}]);\n        });\n};\ndapi.content.updateProperty = function (id, property, stringValue) {\n    var Content = getDependency(dapi_model_content);\n    return Content.findById(id)\n        .then(data => {\n            data.properties[property] = stringValue;\n            return data.save()\n        });\n};\n\ndapi.content.createAndBind = function (parentId, content, title, identifier, channel, tags, properties, rights, author, isPublic) {\n    return dapi.content.get(parentId).then(data => {\n        if (data) {\n            return dapi.content.new(content, title, identifier, channel, tags, properties, rights, author, isPublic, true).then(data => {\n                return dapi.content.addChild(parentId, data._id);\n            });\n        } else {\n            return new Promise((resolve, reject) => {\n                reject(\"Object does not exist\")\n            });\n        }\n    });\n};\ndapi.content.ehCreateAndBind = function () {\n    return function (request, response, next) {\n        var data = request.body;\n        dapi.content.createAndBind(\n            data.parentId,\n            data.content,\n            data.title,\n            data.identifier,\n            data.channel,\n            data.tags,\n            data.properties,\n            data.rights,\n            data.author,\n            data.isPublic\n        ).then(data => {\n            response.send(data);\n        }).catch(errors => {\n            response.send(errors)\n        });\n    };\n};\n\ndapi.content.ehCreatePublic = function (rights) {\n    return function (request, response, next) {\n        var data = request.body;\n        dapi.content.new(data.content, data.title, data.identifier, data.channel, data.tags || [], data.properties || [], rights, data.author, true, false)\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors)\n            })\n        ;\n    };\n};\n\ndapi.content.ehCreateRestricted = function (rights) {\n    return function (request, response, next) {\n        var data = request.body;\n        dapi.content.new(data.content, data.title, data.identifier, data.channel, data.tags, data.properties || [], rights, data.author, false, false)\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors)\n            })\n        ;\n    };\n};\n\ndapi.content.ehYieldSpecific = function (id) {\n    return function (request, response, next) {\n        dapi.content.get(id)\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors)\n            })\n        ;\n    };\n};\n\ndapi.content.ehYield = function (fieldName) {\n    return function (request, response, next) {\n        dapi.content.get(request.params[fieldName || \"id\"])\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors)\n            })\n        ;\n    };\n};\n\ndapi.content.ehDelete = function (fieldName) {\n    return function (request, response, next) {\n        dapi.content.delete(request.params[fieldName || \"id\"])\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors)\n            })\n        ;\n    };\n};\n\ndapi.content.ehUpdate = function (idFieldName) {\n    return function (request, response, next) {\n        var data = request.body;\n        dapi.content.update(\n            request.params[idFieldName || \"id\"],\n            data.content,\n            data.identifier,\n            data.channel,\n            data.title,\n            data.tags,\n            data.properties,\n            data.rights,\n            data.author,\n            data.isPublic\n        )\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    };\n};\n\ndapi.content.ehUpdateProperties = function (idFieldName, propertiesFieldName) {\n    return function (request, response, next) {\n        var data = request.body;\n        dapi.content.updateProperties(request.params[idFieldName || \"id\"], data[propertiesFieldName || \"properties\"])\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    };\n};\n\ndapi.content.ehMakePublic = function (idFieldNamee) {\n    return function (request, response, next) {\n        dapi.content.makePublic(request.params[idFieldName || \"id\"])\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    };\n};\n\ndapi.content.ehMakePrivate = function (idFieldName) {\n    return function (request, response, next) {\n        dapi.content.makePrivate(request.params[idFieldName || \"id\"])\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    };\n};\n\ndapi.content.ehYieldAllowedBySpecificLimit = function (rights, channel) {\n    return function (request, response, next) {\n        var data = request.body;\n        dapi.content.getAllowed(rights, channel)\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    };\n};\n\ndapi.content.ehYieldAll = function (channel) {\n    return function (request, response, next) {\n        var promise = dapi.content.getAll(channel)\n                .then(data => {\n                    response.send(data);\n                })\n                .catch(errors => {\n                    response.send(errors);\n                })\n            ;\n    };\n};\n\ndapi.content.ehYieldAllTopLevel = function (channel) {\n    return function (request, response, next) {\n        dapi.content.getAllTopLevel(channel)\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    }\n};\n\ndapi.content.ehUpdateProperty = function (idFieldName, propertyFieldName, valueFieldName) {\n    return function (request, response, next) {\n        dapi.content.updateProperty(request.params[idFieldName || \"id\"], request.body[propertyFieldName || \"property\"], request.body[valueFieldName || \"value\"])\n            .then(data => {\n                response.send(data);\n            })\n            .catch(errors => {\n                response.send(errors);\n            })\n        ;\n    };\n};\n\ndapi.content.ehYieldAllowedByUser = function (channel) {\n    return function (request, response, next) {\n        var data = request.body;\n        if (request.user) {\n            if (request.user.admin) {\n                dapi.content.getAll(channel)\n                    .then(data => {\n                        response.send(data);\n                    })\n                    .catch(errors => {\n                        response.send(errors);\n                    })\n                ;\n            }\n            else if (request.user.rights) {\n                dapi.content.getAllowed(request.user.rights, channel)\n                    .then(data => {\n                        response.send(data);\n                    })\n                    .catch(errors => {\n                        response.send(errors);\n                    })\n                ;\n            }\n        } else {\n            dapi.content.getPublic(channel)\n                .then(data => {\n                    response.send(data);\n                })\n                .catch(errors => {\n                    response.send(errors);\n                })\n            ;\n        }\n    };\n};\n\nstack.dapis.content = dapi.content;","var dapi = dapi || {};\ndapi.files = dapi.files || {};\ndapi.files.interface = {};\nstack = stack || {};\nstack.dapis = stack.dapis || {};\n\ndapi.files.ehUpload = function (rights, fieldName) {\n    return function (req, res, next) {\n        if(req.params.userId) {\n            var express = getDependency('express'),\n                Promise = getDependency('es6-promise').Promise,\n                fs = getDependency('fs'),\n                multer = getDependency('multer'),\n                path = getDependency(\"path\"),\n                config = getDependency('../config/main.json'),\n                glob = getDependency(\"glob\"),\n                models = {},\n                conf = getDependency(\"../config/dapi/files.json\"),\n                adMessage = \"You cannot pass....I am a servant of the Secret Fire, wielder of the flame of Anor. You cannot pass. The dark fire will not avail you, flame of Udûn. Go back to the Shadow! You cannot pass.\";\n\n            models.users = getDependency(dapi_model_users);\n            models.groups = getDependency(dapi_model_groups);\n            models.file = getDependency(dapi_model_file);\n\n            var secureStorage = multer.diskStorage({\n                destination: function (req, file, callback) {\n                    callback(null, './server/suploads');\n                },\n                filename: function (req, file, callback) {\n                    callback(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n                }\n            });\n            var secureUpload = multer({storage: secureStorage}).array('files');\n            secureUpload(req, res, function (err) {\n                if (err) {\n                    return res.end(\"Error uploading file.<br/>\" + err.toString());\n                }\n                else {\n                    var promises = [];\n                    for (var i = 0; i < req.files.length; i++) {\n\n                        promises.push(new Promise(function (resolve, reject) {\n                            (function (e) {\n                                var tempFile = req.files[e];\n                                var newFile = new models.file();\n                                newFile.rights = rights || req.user.rights || 7;\n                                newFile.path = tempFile.path;\n                                newFile.filename = tempFile.filename;\n                                newFile.type = tempFile.mimetype;\n                                newFile.userId = req.params[fieldName || \"userId\"];\n                                newFile.name = tempFile.originalname;\n                                newFile.save(function (err, product, mongoose) {\n                                    if (err) {\n                                        reject(err);\n                                    } else {\n                                        resolve(product);\n                                    }\n                                });\n                            })(i); //systeme de capture de mutable\n                        }));\n                    }\n                    Promise.all(promises).then(function (errors) {\n                        req.fileUploadResults = errors;\n                        next()\n                    });\n                }\n            });\n        } else {\n            throw new Error(\"req.params.userId not defined\");\n        }\n    }\n};\n\n\ndapi.files.ehUploadPublic = function () {\n    return function (req, res, next) {\n        var express = getDependency('express'),\n            Promise = getDependency('es6-promise').Promise,\n            fs = getDependency('fs'),\n            multer = getDependency('multer'),\n            path = getDependency(\"path\"),\n            config = getDependency('../config/main.json'),\n            glob = getDependency(\"glob\"),\n            models = {},\n            conf = getDependency(\"../config/dapi/files.json\"),\n            adMessage = \"You cannot pass....I am a servant of the Secret Fire, wielder of the flame of Anor. You cannot pass. The dark fire will not avail you, flame of Udûn. Go back to the Shadow! You cannot pass.\";\n\n        models.users = getDependency(dapi_model_users);\n        models.groups = getDependency(dapi_model_groups);\n        models.file = getDependency(dapi_model_file);\n\n        var secureStorage = multer.diskStorage({\n            destination: function (req, file, callback) {\n                callback(null, './server/uploads');\n            },\n            filename: function (req, file, callback) {\n                callback(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n            }\n        });\n        var secureUpload = multer({storage: secureStorage}).array('files');\n\n        secureUpload(req, res, function (err) {\n            if (err) {\n                return res.end(\"Error uploading file.<br/>\" + err.toString());\n            }\n            else {\n                var promises = [];\n                for (var i = 0; i < req.files.length; i++) {\n\n                    promises.push(new Promise(function (resolve, reject) {\n                        (function (e) {\n                            var tempFile = req.files[e];\n                            var newFile = new models.file();\n                            newFile.rights = 7;\n                            newFile.path = tempFile.path;\n                            newFile.filename = tempFile.filename;\n                            newFile.type = tempFile.mimetype;\n                            newFile.userId = null;\n                            newFile.name = tempFile.originalname;\n                            newFile.save(function (err, product, mongoose) {\n                                if (err) {\n                                    reject(err);\n                                } else {\n                                    resolve(product);\n                                }\n                            });\n                        })(i); //systeme de capture de mutable\n                    }));\n                }\n                Promise.all(promises).then(function (errors) {\n                    req.fileUploadResults = errors;\n                    next()\n                });\n            }\n        });\n    }\n};\n\ndapi.files.ehDelete = function (fileFieldName) {\n    return function (req, res, next) {\n        var fileId = req.params[fileFieldName || \"fileId\"];\n        var fileModels = getDependency(dapi_model_file);\n        fileModels.findById(fileId).then(data => {\n            fs.unlinkSync(data.path);\n            fileModels.findByIdAndRemove(fileId).then(data => {\n                req.fileUploadResults = data;\n                next();\n            }).catch(data => {\n                req.fileUploadResults = data;\n                next();\n            })\n        }).catch(err => {\n            req.fileUploadResults = err;\n            next();\n        })\n    }\n};\n\ndapi.files.ehServe = function(fileFieldName){\n    return function (request, response, next) {\n        var fileId = request.params[fileFieldName || \"fileId\"];\n        var fileModels = getDependency(dapi_model_file);\n        fileModels.findById(fileId)\n            .then(file => {\n                console.log(file);\n                if(file.userId){\n                    //File is owned\n                    if(request.user){\n                        stack.dapis.access.users.getBestRights(request.user._id)\n                            .then(data => {\n                                if(file.rights > data || file.userId.toString() == request.user._id.toString()){\n                                    response.sendFile(getDependency(\"path\").join(__dirname, \"../\", file.path));\n                                } else {\n                                    response.statusCode = 403;\n                                    response.send(\"Permission dennied\");\n                                }\n                            })\n                            .catch(error => {\n                                response.send(error);\n                            })\n                        ;\n                    } else {\n                        response.statusCode = 401;\n                        response.send(\"Authentication failed\");\n                    }\n                } else {\n                    //File is public\n                    response.sendFile(getDependency(\"path\").join(__dirname, \"../\", file.path));\n                }\n            })\n            .catch(error => {\n                console.log(error, fileId);\n                response.send(error);\n            })\n        ;\n    }\n};\nstack.dapis.files = dapi.files;","var dapi = dapi || {};\ndapi.access = dapi.access || {};\ndapi.access.groups = {};\nstack = stack || {};\nstack.dapis = stack.dapis || {};\n\n\ndapi.access.groups.create = function (groupname, admins, groupAdmins, rights, manageableBy) {\n    var Groups = getDependency(dapi_model_groups);\n    var myGroup = new Groups();\n    myGroup.name = groupname;\n    myGroup.members = [];\n    myGroup.admins = admins;\n    myGroup.groupAdmin = groupAdmins;\n    myGroup.rights = rights;\n    myGroup.manageableBy = manageableBy;\n    return myGroup.save();\n};\ndapi.access.groups.exists = function (groupId) {\n    var Groups = getDependency(dapi_model_groups);\n    return new Promise(function (resolve) {\n        Groups.count({_id: groupId}, function (err, count) {\n            resolve(count > 0)\n        });\n    });\n};\ndapi.access.groups.get = function (groupId) {\n    var Groups = getDependency(dapi_model_groups);\n    return Groups.findById(groupId);\n};\ndapi.access.groups.getAll = function () {\n    var Groups = getDependency(dapi_model_groups);\n    return Groups.find({});\n};\ndapi.access.groups.removeMember = function (groupId, userId) {\n    var Groups = getDependency(dapi_model_groups);\n    return Groups.findByIdAndUpdate(groupId, {$pull: {members: userId}})\n};\ndapi.access.groups.addUserAsAdmin = function (groupId, userId) {\n    var Groups = getDependency(dapi_model_groups);\n    return new Promise(function (resolve, reject) {\n        stack.dapis.access.users.exists(userId).then(exists => {\n            if (exists) {\n                return stack.dapis.access.groups.get(groupId);\n            } else {\n                throw \"User does not exist\";\n            }\n        }).then(group => {\n            if (group.admins.indexOf(userId) == -1) {\n                Groups.findByIdAndUpdate(groupId, {$push: {admins: userId}}, function (err, lgroup) {\n                    if (err)\n                        reject(err);\n                    else\n                        resolve(lgroup);\n                });\n            }\n            else {\n                resolve(group)\n            }\n        }).catch(error => {\n            reject(error);\n        })\n    });\n};\ndapi.access.groups.removeUserAsAdmin = function (groupId, userID) {\n    var Groups = getDependency(dapi_model_groups);\n    return Groups.findByIdAndUpdate(groupId, {$pull: {admins: userID}})\n};\ndapi.access.groups.addGroupAsAdmin = function (groupId, futureAdminGroupId) {\n    var Groups = getDependency(dapi_model_groups);\n    var Users = getDependency(dapi_model_users);\n    return new Promise(function (resolve, reject) {\n        stack.dapis.access.groups.exists(futureAdminGroupId).then(exists => {\n            if (exists) {\n                if (exists) {\n                    return stack.dapis.access.groups.get(groupId);\n                } else {\n                    throw \"Group does not exist\";\n                }\n            }\n        }).then(group => {\n            if (group.groupAdmin.indexOf(futureAdminGroupId) == -1) {\n                Groups.findByIdAndUpdate(groupId, {$push: {groupAdmin: futureAdminGroupId}}, function (err, lgroup) {\n                    if (err)\n                        reject(err);\n                    else\n                        resolve(lgroup);\n                });\n            }\n            else {\n                resolve(group)\n            }\n        }).catch(error => {\n            reject(error);\n        })\n    });\n};\ndapi.access.groups.removeGroupAsAdmin = function (groupId, adminGroupId) {\n    var Groups = getDependency(dapi_model_groups);\n    return Groups.findByIdAndUpdate(groupId, {$pull: {groupAdmin: adminGroupId}})\n};\ndapi.access.groups.update = function (groupId, groupnameArg, rightsArg, manageableByArg) {\n    var Groups = getDependency(dapi_model_groups);\n    return Groups.findByIdAndUpdate(groupId, {\n        $set: {\n            name: groupnameArg || name,\n            rights: rightsArg || rights,\n            manageableBy: manageableByArg || manageableBy\n        }\n    }, {upsert: true});\n};\ndapi.access.groups.delete = function (groupId) {\n    var Groups = getDependency(dapi_model_groups);\n    return new Promise(function (topResolve, topReject) {\n        stack.dapis.access.groups.exists(groupId).then(exists => {\n            if (exists) {\n                return stack.dapis.access.groups.get(groupId);\n            } else {\n                topReject(\"Group does not exist\")\n            }\n        }).then(group => {\n            var myPromises = [];\n            myPromises.push(Groups.findByIdAndRemove(groupId));\n            for (var memberId of group.members) {\n                myPromises.push(stack.dapis.access.users.pureRemoveGroup(memberId, groupId));\n            }\n            topResolve(Promise.all(myPromises))\n        }).catch(err => {\n            topReject(err);\n        })\n    })\n};\ndapi.access.groups.canUserChangeGroup = function (groupId, userId) {\n    return new Promise(function (topResolve, topReject) {\n        Promise.all([\n            stack.dapis.access.users.getBestRights(userId),\n            stack.dapis.access.groups.get(groupId),\n            stack.dapis.access.users.getRights(userId)\n        ]).then(data => {\n            console.log(data);\n            topResolve((data[0] <= data[1].manageableBy && data[2].canChangeGroup.value))\n        }).catch(err => {\n            topReject(err);\n        });\n    });\n};\nstack.dapis.access = stack.dapis.access || {};\nstack.dapis.access.groups = dapi.access.groups;","/**\n * Created by Kiran on 3/29/2016.\n */\n\nvar dapi = dapi || {};\ndapi.mailer = dapi.mailer || {};\nstack = stack || {};\nstack.dapis = stack.dapis || {};\n\ndapi.mailer.sendMails = function (mails) {\n    return new Promise(function (resolve, reject) {\n        var nodemail = getDependency(\"nodemailer\");\n        var mailConfig = getDependency(\"../config/dapi/mailer.json\");\n\n        var transport = nodemail.createTransport(mailConfig);\n        var work = [];\n        mails.forEach(function (mail) {\n            work.push(transport.sendMail(mail));\n        });\n        Promise.all(work).then(data => {\n            resolve(data);\n        }, errArg => {\n            reject(errArg)\n        });\n    });\n};\nstack.dapis.mailer = dapi.mailer;","var dapi = dapi || {};\ndapi.useful = dapi.useful || {};\ndapi.useful.interface = {};\nstack = stack || {};\nstack.dapis = stack.dapis || {};\n\ndapi.useful.ehParseJSON = function (array) {\n    var realArray = array || \"body\";\n    return function(request, response, next){\n        for(var index in request[realArray]) {\n            try {\n                request[realArray][index] = JSON.parse(request[realArray][index])\n            } catch (e) {\n                request[realArray][index] = e;\n            }\n        }\n        next();\n    };\n};\n\ndapi.useful.ehQuickRender = function (page) {\n    return function(request, response, next){\n        response.render(page, {user: request.user || false, page: page});\n    }\n};\n\ndapi.useful.ehPlug = function (message) {\n    return function(request, response, next){\n        response.send(message);\n    }\n};\n\ndapi.useful.ehSetHeader = function (field, value) {\n    return function(request, response, next){\n        response.set(field, value);\n        next();\n    }\n};\n\ndapi.useful.ehFieldsExist = function (fieldArray, requestArrayName) {\n    return function (request, response, next) {\n        var errors = [];\n        var type = requestArrayName || \"body\";\n        for (let field of fieldArray) {\n            if (!request[type][field]) {\n                errors.push(`${field} does not exists in request.${type}`);\n            }\n        }\n        if (!errors.length) {\n            next();\n        }\n        else {\n            response.status(400);\n            response.send(errors);\n        }\n    }\n};\n\ndapi.useful.helperEhgfParams = function (element, request, defaultValue) {\n    return (typeof element == \"function\" ? element(request) : element) || defaultValue || 0;\n};\n\nstack.dapis.useful = dapi.useful;","var dapi = dapi || {};\ndapi.access = dapi.access || {};\ndapi.access.conf = getDependency('../config/dapi/access.json');\nstack = stack || {};\nstack.dapis = stack.dapis || {};\n\ndapi.access.users = {};\ndapi.access.users.create = function (username, password, rights) {\n    var Users = getDependency(dapi_model_users);\n    var sha = getDependency(\"sha256\");\n    return new Promise(function (topResolve, topReject) {\n        Users.count({username: username}, function (err, nbr) {\n            if (err)\n                topReject(err);\n            else if (nbr == 0 && username != \"\") {\n                var myUser = new Users();\n                myUser.username = username;\n                myUser.password = password;\n                myUser.rights = rights;\n\n                myUser.save(function (err) {\n                    if (err)\n                        topReject(err);\n                    else\n                        topResolve(myUser);\n                });\n            } else {\n                topReject('User with same username already exist');\n            }\n        });\n    });\n};\ndapi.access.users.get = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    return Users.findById(userId);\n};\ndapi.access.users.getWithoutPassword = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    return Users.findById(userId, \"-password\");\n};\ndapi.access.users.getAllByRights = function (rightsArg) {\n    var Users = getDependency(dapi_model_users);\n    return Users.find({\"rights\": rightsArg}, \"-password\");\n};\ndapi.access.users.getGroups = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    return Users.findById(userId, 'groups');\n};\ndapi.access.users.exists = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    return new Promise(function (resolve, reject) {\n        Users.count({_id: userId}, function (err, count) {\n            resolve(count > 0)\n        });\n    });\n};\ndapi.access.users.addToGroup = function (groupId, userId) {\n    var Users = getDependency(dapi_model_users);\n    var Groups = getDependency(dapi_model_groups);\n    return new Promise(function (topResolve, topReject) {\n        dapi.access.groups.exists(groupId).then(function (data) {\n            if (data) {\n                return dapi.access.users.exists(userId);\n            }\n            else {\n                throw \"Group does not exist\";\n            }\n        }).then(userExists => {\n            if (userExists) {\n                return dapi.access.users.getGroups(userId, false)\n            } else {\n                throw \"User does not exist\";\n            }\n        }).then(data => {\n            if (data.groups.indexOf(groupId) == -1) {\n                return Users.findByIdAndUpdate(userId, {$push: {groups: groupId}});\n            }\n            else {\n                return \"pass\"\n            }\n        }).then(data => {\n            return dapi.access.groups.get(groupId, false)\n        }).then(data => {\n            if (data.members.indexOf(userId) == -1) {\n                Groups.findByIdAndUpdate(groupId, {$push: {members: userId}}, function (err) {\n                    if (err) {\n                        topReject(err);\n                    } else {\n                        topResolve(\"All good\");\n                    }\n                });\n            }\n            else {\n                topResolve(\"All good\");\n            }\n        }).catch(data => {\n            topReject(data);\n        });\n    });\n};\ndapi.access.users.getBestRights = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    var Groups = getDependency(dapi_model_groups);\n    var groupRights = [];\n    return new Promise(function (topResolve, topReject) {\n        dapi.access.users.getGroups(userId).then(data => {\n            var myPromises = [];\n            for (var groupId of data.groups) {\n                (function (id) {\n                    myPromises.push(new Promise(function (resolve, reject) {\n                        Groups.findById(id, 'rights', function (err, group) {\n                            resolve(group.rights);\n                        })\n                    }))\n                })(groupId)\n            }\n            Promise.all(myPromises).then(data => {\n                groupRights = data;\n                return dapi.access.users.get(userId)\n            }).then(user => {\n                var usersBestRights = user.rights || 0;\n                for (var rights of groupRights) {\n                    if (usersBestRights < 2) {\n                        continue;\n                    }\n                    if (rights < usersBestRights) {\n                        usersBestRights = rights\n                    }\n                }\n                topResolve(usersBestRights);\n            }).catch(err => {\n                topReject(err);\n            })\n        }).catch(err => {\n            topReject(err);\n        })\n    });\n};\ndapi.access.users.update = function (userId, usernameArg, passwordArg, rightsArg) {\n    var Users = getDependency(dapi_model_users);\n    return Users.findByIdAndUpdate(userId, {\n        $set: {\n            username: usernameArg || username,\n            password: passwordArg || password,\n            rights: rightsArg || rights\n        }\n    }, {upsert: true});\n};\ndapi.access.users.remove = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    return Users.findByIdAndRemove(userId)\n};\ndapi.access.users.checkCredentials = function (username, password) {\n    var Users = getDependency(dapi_model_users);\n    var sha = getDependency(\"sha256\");\n    return Users.findOne({'username': username, 'password': sha(password)}, '_id').then(data => {\n        if (data) {\n            return data._id;\n        } else {\n            return false;\n        }\n    });\n};\ndapi.access.users.pureRemoveGroup = function (userId, groupId) {\n    var Users = getDependency(dapi_model_users);\n    var Groups = getDependency(dapi_model_groups);\n    return Users.findByIdAndUpdate(userId, {$pull: {groups: groupId}})\n};\ndapi.access.users.devare = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    return new Promise(function (topResolve, topReject) {\n        dapi.access.users.exists(userId).then(exists => {\n            if (exists) {\n                return dapi.access.users.getGroups(userId)\n            }\n            else {\n                topResolve(\"All good\");\n            }\n        }).then(user => {\n            var myPromises = [];\n            myPromises.push(Users.findByIdAndRemove(userId));\n            for (var groupId of user.groups) {\n                myPromises.push(dapi.access.groups.removeUserAsAdmin(groupId, userId));\n                myPromises.push(dapi.access.groups.removeMember(groupId, userId));\n            }\n            topResolve(Promise.all(myPromises))\n        }).catch(err => {\n            topReject(err);\n        })\n    });\n};\ndapi.access.users.getRights = function (userId) {\n    var Users = getDependency(dapi_model_users);\n    var conf = getDependency(\"../config/dapi/access.json\");\n    return new Promise(function (topResolve, topReject) {\n        dapi.access.users.getBestRights(userId).then(rights => {\n            topResolve(conf.rights[rights])\n        }).catch(err => {\n            topReject(err)\n        })\n    });\n};\ndapi.access.users.canUserChangeUser = function (userId, challengerId) {\n    return new Promise(function (topResolve, topReject) {\n        Promise.all([\n            dapi.access.users.getBestRights(userId),\n            dapi.access.users.getBestRights(challengerId),\n            dapi.access.users.getRights(challengerId)\n        ]).then(data => {\n            topResolve((data[0] > data[1] && data[2].canChangeUser.value))\n        }).catch(err => {\n            topReject(err);\n        });\n    });\n};\ndapi.access.users.removeFromGroup = function (groupId, userId) {\n    return Promise.all([\n        dapi.access.users.pureRemoveGroup(userId, groupId),\n        dapi.access.groups.removeMember(groupId, userId)\n    ])\n};\n\n\ndapi.access.ehAuth = function (limit, failureRedirect) {\n    return function (request, response, next) {\n        if (request.user) {\n            if (request.user.admin) {\n                next();\n            } else if(!limit && limit !== 0) {\n                console.log(\"next applied\");\n                next();\n            } else {\n                dapi.access.users.getBestRights(request.user._id).then(rights => {\n                    if (rights <= limit) {\n                        next();\n                    } else {\n                        response.statusCode = 403;\n                        response.redirect(failureRedirect || dapi.access.conf.failureRedirect.value);\n                    }\n                }).catch(err => {\n                    response.statusCode = 401;\n                    response.redirect(failureRedirect || dapi.access.conf.failureRedirect.value);\n                })\n            }\n        } else {\n            response.statusCode = 401;\n            response.redirect(failureRedirect || dapi.access.conf.failureRedirect.value);\n        }\n    }\n};\n\ndapi.access.ehLogin = function (successRedirect, failureRedirect) {\n    return getDependency('passport').authenticate('local', {\n        successRedirect: successRedirect || dapi.access.conf.successRedirect.value,\n        failureRedirect: failureRedirect || dapi.access.conf.failureRedirect.value,\n        failureFlash: true\n    })\n};\n\ndapi.access.ehLogout = function () {\n    return function (request, response, next) {\n        request.logout();\n        next();\n    }\n};\nstack.dapis.access = stack.dapis.access || {};\nstack.dapis.access.users = dapi.access.users;","function dapi_model_content(){\n    var mongoose = getDependency('mongoose');\n    var Schema = mongoose.Schema;\n\n    var contents = new Schema({\n        title: {type: String, required: true},\n        content: {type:String},\n        channel: {type:String},\n        identifier: {type:String},\n        tags: [{type: String}],\n        properties: [{type: String}],\n        rights: {type: Number},\n        author: {type: Schema.ObjectId, ref: \"dapi_user\", required: false},\n        children: [{type: Schema.ObjectId, ref: \"dapi_content\"}],\n        timestamp: {type: Date, default: Date.now},\n        isPublic : {type: Boolean},\n        hasParent : {type: Boolean, default: false}\n    });\n\n    return mongoose.model('dapi_content', contents);\n}","/**\n * Created by ressa on 3/10/2016.\n */\nfunction dapi_model_file(){\n    var mongoose = getDependency('mongoose'),\n        Promise = getDependency('es6-promise').Promise,\n        fs = getDependency('fs'),\n        multer = getDependency('multer'),\n        path = getDependency(\"path\");\n\n    var Schema = mongoose.Schema;\n\n    var model = new Schema({\n        name: {type: String, required: true},\n        type: {type: String, required: true},\n        rights: {type: Number, required: true},\n        path: {type: String, required: true},\n        filename: {type: String, required: true},\n        userId: {type: Schema.ObjectId, ref: \"dapi_user\"},\n        groupId: {type: Schema.ObjectId},\n        birthdate: { type : Date, default: Date.now }\n    });\n\n    return mongoose.model('File', model);\n}","/**\n * Created by Kiran on 3/9/2016.\n */\n\nfunction dapi_model_groups(){\n    //var users = getDependency(model_users);\n    var mongoose = getDependency('mongoose');\n    var Schema = mongoose.Schema;\n\n    var group = new Schema({\n        name: {type: String, required: true},\n        members: [{type: Schema.ObjectId, ref: \"dapi_user\"}],\n        admins: [{type: Schema.ObjectId, ref: \"dapi_user\"}],\n        groupAdmin: [{type: Schema.ObjectId, ref: \"dapi_user\"}],\n        rights: {type: Number},\n        manageableBy: {type: Number}\n    });\n\n    return mongoose.model('dapi_group', group);\n\n}","\nfunction dapi_model_users(){\n    var mongoose = getDependency('mongoose');\n    var Schema = mongoose.Schema;\n    var Hash = require('password-hash');\n\n    var users = new Schema({\n        username: {type: String, required: true, unique: true},\n        password: {type: String, required: true, set: function(newValue) {\n            return Hash.isHashed(newValue) ? newValue : Hash.generate(newValue);\n        }},\n        groups: [{type: Schema.ObjectId, ref: 'dapi_group'}],\n        rights: {type: Number, default: 5}\n    });\n\n    users.statics.authenticate = function(username, password, callback) {\n        if (username == dapi.access.conf.adminUser.login.value &&\n            getDependency('sha256')(password) == dapi.access.conf.adminUser.password.value\n        ) {\n            callback(null, {admin : \"true\", id: \"admin\"});\n        } else {\n            this.findOne({ username: username }).then(user => {\n                if (user && Hash.verify(password, user.password)) {\n                    callback(null, user);\n                } else {\n                    callback(null, null);\n                }\n            }).catch(err => {\n                callback(null, null);\n            })\n        }\n    };\n\n    return mongoose.model('dapi_user', users);\n}"]}