{"version":3,"names":[],"mappings":"","sources":["kvmContexts.js"],"sourcesContent":["var generic;\n(function (generic) {\n    var visibility;\n    (function (visibility) {\n        function toggle(htmlElementIdArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute('data-kvm-state')) {\n                htmlElementArg.setAttribute('data-kvm-state', htmlElementArg.getAttribute('data-kvm-state') == 'shown' ? 'hidden' : 'shown');\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        visibility.toggle = toggle;\n        function hide(htmlElementIdArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute('data-kvm-state')) {\n                htmlElementArg.setAttribute('data-kvm-state', 'hidden');\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        visibility.hide = hide;\n        function show(htmlElementIdArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute('data-kvm-state')) {\n                htmlElementArg.setAttribute('data-kvm-state', 'shown');\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        visibility.show = show;\n    })(visibility = generic.visibility || (generic.visibility = {}));\n    var kvmContexts;\n    (function (kvmContexts) {\n        var attributeIdentifier = 'data-kvm-context';\n        function inc(htmlElementIdArg, maxStatesArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute(attributeIdentifier)) {\n                htmlElementArg.setAttribute(attributeIdentifier, ((eval(htmlElementArg.getAttribute(attributeIdentifier)) + 1) % maxStatesArg).toString());\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        kvmContexts.inc = inc;\n        function dec(htmlElementIdArg, maxStatesArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute(attributeIdentifier)) {\n                var tempContext = (eval(htmlElementArg.getAttribute(attributeIdentifier)) - 1) % maxStatesArg;\n                htmlElementArg.setAttribute(attributeIdentifier, (tempContext < 0) ? maxStatesArg + tempContext : tempContext);\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        kvmContexts.dec = dec;\n        function reset(htmlElementIdArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute(attributeIdentifier)) {\n                htmlElementArg.setAttribute(attributeIdentifier, '0');\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        kvmContexts.reset = reset;\n        function fixe(htmlElementIdArg, contextArg) {\n            var htmlElementArg = document.getElementById(htmlElementIdArg);\n            if (htmlElementArg.hasAttribute(attributeIdentifier)) {\n                htmlElementArg.setAttribute(attributeIdentifier, contextArg.toString());\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        kvmContexts.fixe = fixe;\n    })(kvmContexts = generic.kvmContexts || (generic.kvmContexts = {}));\n    var eventForCss;\n    (function (eventForCss) {\n        function scrollFromTop(htmlElementArg) {\n            htmlElementArg.addEventListener('scroll', function () {\n                (htmlElementArg.scrollTop > 0) ? htmlElementArg.setAttribute('data-kvm-scrolled', 'scrolled') : htmlElementArg.setAttribute('data-kvm-scrolled', 'top');\n            });\n        }\n        eventForCss.scrollFromTop = scrollFromTop;\n    })(eventForCss = generic.eventForCss || (generic.eventForCss = {}));\n})(generic || (generic = {}));"],"file":"kvmContexts.js"}